@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IApiReaderService apiReader
@inject IJsonDeserializerService jsonDeserializer;
@using System.Text;
@using System.Text.Json.Serialization;
@using WeatherBlazor.Data.Model
@using WeatherBlazor.Services

<PageTitle>Forecast</PageTitle>

<h3>Weather Forecast</h3>

@if (_forecastAsJson is not null)
{
	
	<div class="forecast-tiles">
		@for (int i = 0; i < _forecastRoot?.properties.periods.Count; i++)
		{
			ForecastPeriod? period = _forecastRoot?.properties.periods[i];

			if (period != null)
			{
				<div class="forecast-tile">
					<p>
						<strong>
							@if (i == 0)
							{
								@("Current Conditions")
							}
							else
							{
								// Determine if the period is for day or night
								bool isDayPeriod = i % 2 == 1; // Day periods are at odd indices (1, 3, 5,...), night periods are even indices (2, 4, 6,...)
								string dayName = ProcessDateString(period.startTime.ToString(), _dayFormat);
								@($"{dayName} {(isDayPeriod ? "" : "Night")}")
							}
						</strong>
					</p>
					<p><strong>Temperature:</strong> @period.temperature @period.temperatureUnit</p>
					<p><strong>Weather:</strong> @period.shortForecast</p>
					<p><strong>Wind Speed:</strong> @period.windSpeed</p>
					<p><strong>Wind Direction:</strong> @period.windDirection</p>
					@if (period.probabilityOfPrecipitation.value > 0)
					{
						<p><strong>Change for Precipitation:</strong> @period.probabilityOfPrecipitation.value %</p>
					}
					<p><strong>Detailed Forecast:</strong> @period.detailedForecast</p>
				</div>
			}
		}
	</div>

	<style>
		.iframe-container {
			width: 100%;
			height: 600px;
			border: 0;
			overflow: hidden;
		}

			.iframe-container iframe {
				width: 100%;
				height: 100%;
				border: 0;
			}
	</style>

	<div class="iframe-container">
		<iframe
			class="iframe-weatherRadar"
			src="https://radar.weather.gov/?settings=v1_eyJhZ2VuZGEiOnsiaWQiOiJ3ZWF0aGVyIiwiY2VudGVyIjpbLTkzLjE0MSwzNS4yNzhdLCJsb2NhdGlvbiI6Wy05My4xNDEsMzUuMjc4XSwiem9vbSI6NywibGF5ZXIiOiJicmVmX3FjZCJ9LCJhbmltYXRpbmciOnRydWUsImJhc2UiOiJzdGFuZGFyZCIsImFydGNjIjpmYWxzZSwiY291bnR5IjpmYWxzZSwiY3dhIjpmYWxzZSwicmZjIjpmYWxzZSwic3RhdGUiOmZhbHNlLCJtZW51Ijp0cnVlLCJzaG9ydEZ1c2VkT25seSI6dHJ1ZSwib3BhY2l0eSI6eyJhbGVydHMiOjAuNzYsImxvY2FsIjowLjYsImxvY2FsU3RhdGlvbnMiOjAuOCwibmF0aW9uYWwiOjAuNn19"
			allowfullscreen>
		</iframe>
	</div>

}
else
{
	<p>Loading forecast data...</p>
}



@code{
	private bool _isFirstRender = true;

	private const string _dayFormat = "dddd";
	private const string _timeFormat = "HH:mm";

	private Location? _location;

	private const string _baseAddress = "https://api.weather.gov/";

	private string? _forecastAsJson;
	private string? _pointRootAsJson;

	private PointRoot? _pointRoot;
	private ForecastRoot? _forecastRoot;

	private void SetForecastRoot(string forecastAsJson)
	{
		ArgumentNullException.ThrowIfNull(forecastAsJson);
		_forecastRoot = jsonDeserializer.Deserialize<ForecastRoot>(forecastAsJson);
	}

	private void SetPointRoot(string pointRootAsJson)
	{
		ArgumentNullException.ThrowIfNull(pointRootAsJson);
		_pointRoot = jsonDeserializer.Deserialize<PointRoot>(pointRootAsJson);
	}

	private T SetRoot<T>(string rootAsJson)
	{
		ArgumentNullException.ThrowIfNull(rootAsJson);

		return jsonDeserializer.Deserialize<T>(rootAsJson) ??
			throw new InvalidOperationException();
	}

	private async Task GetPointRootJson(string pointRequestUri)
	{
		_pointRootAsJson = await apiReader.ReadAsync(_baseAddress, pointRequestUri);
	}

	private async Task GetForecastJson(string forecastRequestUri)
	{
		_forecastAsJson = await apiReader.ReadAsync(_baseAddress, forecastRequestUri);
	}

	private string ProcessDateString(string dateString, string formatString)
	{
		if (DateTime.TryParse(dateString, out DateTime dateTime))
		{
			return dateTime.ToString(formatString);
		}
		else
		{
			throw new ArgumentException("Invalid date string format.");
		}
	}

	private double ConvertSecondsToHours(double seconds) => Math.Round((seconds / 3600), 1);

	private async Task<Location?> GetLocation()
	{
		try
		{
			Location location = new();
			location = await JSRuntime.InvokeAsync<Location>("getGeolocation");

			string? latitudeFormatted = location.Latitude.ToString("F4");
			string? longitudeFormatted = location.Longitude.ToString("F4");

			location.Latitude = double.Parse(latitudeFormatted);
			location.Longitude = double.Parse(longitudeFormatted);

			return location;
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			return null;
		}
	}

	public class Location
	{
		public double Latitude { get; set; }
		public double Longitude { get; set; }
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_isFirstRender = false;
			// Call GetLocation after the first render
			_location = await GetLocation();
		}

		string pointRequestUri = string.Empty;
		if (_location is not null)
		{
			pointRequestUri = $"/points/{_location.Latitude},{_location.Longitude}";
		}

		await GetPointRootJson(pointRequestUri);

		_pointRoot = SetRoot<PointRoot>(_pointRootAsJson ??
			throw new ArgumentNullException(
				$"{nameof(SetRoot)} was called with {nameof(_pointRootAsJson)} as null."));

		string? forecastFullUrl = _pointRoot?.properties.forecast;
		string? forecastUri = forecastFullUrl?[_baseAddress.Length..];

		await GetForecastJson(forecastUri ??
			throw new ArgumentNullException(
				$"{nameof(GetForecastJson)} was called with {nameof(forecastUri)} as null."));

		_forecastRoot = SetRoot<ForecastRoot>(_forecastAsJson ??
			throw new ArgumentNullException(
				$"{nameof(SetRoot)} was called with {nameof(_forecastAsJson)} as null."));

		StateHasChanged();
	}
}